{"version":3,"sources":["shared/Divider/index.js","view/index.js","App.js","serviceWorker.js","index.js"],"names":["Divider","react_default","a","createElement","Pane","align","width","marginTop","majorScale","style","color","backgroundColor","height","RQM","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","isToggleOn","handleClick","bind","assertThisInitialized","console","log","setState","randomQuote","$","ajax","url","dataType","data","success","response","quoteText","length","quoteAuthor","html","attr","colorS","Math","floor","random","toString","animate","shadeColor","newQuote","_this2","marginBottom","reactstrap_es","id","shared_Divider","Button","appearance","intent","onClick","e","Component","percent","R","parseInt","substring","G","B","Title","Heading","size","App","App_Title","view","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5c97a33f.chunk.js","sourcesContent":["\r\n/*\r\n    src/shared/Divider/index.js\r\n*/\r\n\r\n// imports\r\nimport React from 'react';\r\nimport { Pane, majorScale } from 'evergreen-ui';\r\n\r\n// divider component\r\nconst Divider = () => (\r\n    <Pane align=\"center\">\r\n        <Pane\r\n            width={224}\r\n            marginTop={majorScale(6)}\r\n        >\r\n            <hr\r\n                style={{\r\n                    color: \"#425A70\",\r\n                    backgroundColor: \"#425A70\",\r\n                    height: 2\r\n                }}\r\n            />\r\n        </Pane>\r\n    </Pane>\r\n);\r\n\r\nexport default Divider;","\r\n/**\r\n * src/view/index.js\r\n * RQM\r\n */\r\n\r\n // imports\r\nimport React, { Component } from 'react'\r\nimport $ from \"jquery\";\r\n\r\nimport { Pane, Button, majorScale } from 'evergreen-ui'\r\nimport { Col } from 'reactstrap'\r\n\r\n// components\r\nimport Divider from '../shared/Divider'\r\n\r\n/**\r\n * // RANDOM QUOTE MACHINE \r\n *  component class\r\n */\r\nclass RQM extends Component {\r\n  \r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {isToggleOn: true};\r\n\r\n    // This binding is necessary to make `this` work in the callback\r\n    this.handleClick = this.handleClick.bind(this);\r\n  }\r\n\r\n  handleClick() {\r\n    console.log('this is:', this);\r\n    this.setState(state => ({\r\n      isToggleOn: !state.isToggleOn\r\n    }));\r\n  }\r\n\r\n  newQuote(){\r\n    randomQuote();\r\n    color();\r\n  }\r\n\r\n  componentDidMount(){\r\n    this.newQuote();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n        <Pane \r\n          align=\"center\"\r\n          marginTop={majorScale(7)}\r\n        >\r\n\r\n          <Pane \r\n            align=\"center\" \r\n            marginBottom={majorScale(7)}\r\n          >\r\n            <Col>\r\n              <p id=\"random_quote\"></p>\r\n            </Col>\r\n          </Pane>\r\n\r\n          <Divider />\r\n\r\n          <Button \r\n            appearance=\"primary\"\r\n            intent=\"success\"\r\n            marginTop={majorScale(4)}\r\n            height={majorScale(7)}\r\n            onClick={(e) => this.newQuote(e)}\r\n            id=\"btn1\"\r\n          >Next Quote!\r\n          </Button>\r\n\r\n        </Pane>\r\n    )\r\n  }\r\n\r\n}\r\n\r\n/*\r\n\r\n          <Button onClick={this.handleClick}>\r\n            {this.state.isToggleOn ? 'ON' : 'OFF'}\r\n          </Button>\r\n          <Button \r\n            onClick={(e) => this.handleClick(e)}\r\n            id=\"btn0\"\r\n          >Tweet\r\n          </Button>\r\n\r\n */\r\n\r\nexport default RQM;\r\n\r\nfunction randomQuote(){\r\n  $.ajax({   \r\n    url: \"https://api.forismatic.com/api/1.0/?\",\r\n    dataType: \"jsonp\",\r\n    data: \"method=getQuote&format=jsonp&lang=en&jsonp=?\",\r\n    success: function( response ) {\r\n      if(response.quoteText.length > 120){\r\n        randomQuote();\r\n      }\r\n      if(response.quoteAuthor.length > 0){\r\n        $(\"#random_quote\").html(\"<p id='random_quote' class='lead text-center'>\" + response.quoteText + \"<br/>&dash; \" + response.quoteAuthor + \" &dash;</p>\");\r\n        $('#btn0').attr('href', 'https://twitter.com/intent/tweet?text='+response.quoteText+ '- ' + response.quoteAuthor).attr('target', '_blank');\r\n      } else {\r\n        $(\"#random_quote\").html(\"<p id='random_quote' class='lead text-center'>\" + response.quoteText + \"<br/>&dash; Unknown &dash;</p>\");\r\n        $('#btn0').attr('href', 'https://twitter.com/intent/tweet?text='+response.quoteText+ '- Unknown').attr('target', '_blank');\r\n      }      \r\n    }\r\n  });\r\n}\r\n\r\nfunction color(){\r\n  var colorS = '#'+Math.floor(Math.random()*16777215).toString(16);\r\n  $(\"body\").animate({backgroundColor:shadeColor(colorS,-5)},1000);\r\n  $(\"#random_quote\").animate({color:shadeColor(colorS,-20)},1000);\r\n  $(\"#btn0\").animate({backgroundColor:shadeColor(colorS,-20)},1000);\r\n  $(\"#btn1\").animate({backgroundColor:shadeColor(colorS,-20)},1000);\r\n  //$(\".fa-quote-left\").animate({color:shadeColor(colorS,-20)},1000);\r\n  //$(\".fa-twitter\").animate({backgroudColor:shadeColor(colorS,-20)},1000);\r\n}\r\n// credit: https://stackoverflow.com/questions/5560248/programmatically-lighten-or-darken-a-hex-color-or-rgb-and-blend-colors/13532993#13532993\r\nfunction shadeColor(color, percent) {\r\n    var R = parseInt(color.substring(1,3),16);\r\n    var G = parseInt(color.substring(3,5),16);\r\n    var B = parseInt(color.substring(5,7),16);\r\n    R = parseInt(R * (100 + percent) / 100);\r\n    G = parseInt(G * (100 + percent) / 100);\r\n    B = parseInt(B * (100 + percent) / 100);\r\n    R = (R<255)?R:255;  \r\n    G = (G<255)?G:255;  \r\n    B = (B<255)?B:255;  \r\n    var RR = ((R.toString(16).length===1)?\"0\"+R.toString(16):R.toString(16));\r\n    var GG = ((G.toString(16).length===1)?\"0\"+G.toString(16):G.toString(16));\r\n    var BB = ((B.toString(16).length===1)?\"0\"+B.toString(16):B.toString(16));\r\n    return \"#\"+RR+GG+BB;\r\n}\r\n","\n/**\n * src/App.js\n * App component\n */\n\n// imports\nimport React, { Component } from 'react';\nimport { Pane, Heading } from 'evergreen-ui'\n\n// components\n\nimport Divider from './shared/Divider'\n\nimport RQM from './view'\n\n// Title component\nconst Title = () => (\n  <Pane align=\"center\">\n    <Heading\n      size={900}\n      align=\"center\"\n      marginTop={42}\n      marginBottom={21}\n    >\n      Random Quote Machine\n    </Heading>\n  </Pane>\n);\n\n/**\n * App component class\n */\nclass App extends Component {\n  render(){\n    return(\n      <Pane>\n        <Title />\n        <Divider />\n        <RQM />\n        <Divider />\n      </Pane>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}