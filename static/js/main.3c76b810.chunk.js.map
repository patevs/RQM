{"version":3,"sources":["shared/Divider/index.js","view/index.js","App.js","serviceWorker.js","index.js"],"names":["Divider","react_default","a","createElement","Pane","align","width","marginTop","majorScale","style","color","backgroundColor","height","RQM","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","isToggleOn","handleClick","bind","assertThisInitialized","console","log","setState","randomQuote","$","ajax","url","dataType","data","success","response","quoteText","length","quoteAuthor","html","attr","newQuote","colorS","Math","floor","random","toString","document","body","shadeColor","getElementById","background","_this2","reactstrap_es","marginBottom","Text","id","shared_Divider","Button","appearance","intent","onClick","e","Component","percent","R","parseInt","substring","G","B","Title","Heading","size","App","App_Title","view","Boolean","window","location","hostname","match","ReactDOM","render","src_App","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3c76b810.chunk.js","sourcesContent":["\r\n/*\r\n    src/shared/Divider/index.js\r\n*/\r\n\r\n// imports\r\nimport React from 'react';\r\nimport { Pane, majorScale } from 'evergreen-ui';\r\n\r\n// divider component\r\nconst Divider = () => (\r\n    <Pane align=\"center\">\r\n        <Pane\r\n            width={224}\r\n            marginTop={majorScale(6)}\r\n        >\r\n            <hr\r\n                style={{\r\n                    color: \"#425A70\",\r\n                    backgroundColor: \"#425A70\",\r\n                    height: 2\r\n                }}\r\n            />\r\n        </Pane>\r\n    </Pane>\r\n);\r\n\r\nexport default Divider;","\r\n/**\r\n * src/view/index.js\r\n * RQM\r\n */\r\n\r\n // imports\r\nimport React, { Component } from 'react'\r\nimport $ from \"jquery\";\r\n\r\nimport { Pane, Button, majorScale, Text } from 'evergreen-ui'\r\nimport { Container, Col } from 'reactstrap'\r\n\r\n// components\r\nimport Divider from '../shared/Divider'\r\n\r\n/**\r\n * // RANDOM QUOTE MACHINE \r\n *  component class\r\n */\r\nclass RQM extends Component {\r\n  \r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      color: \"#D5D6D7\",\r\n      isToggleOn: true\r\n    };\r\n    // This binding is necessary to make `this` work in the callback\r\n    this.handleClick = this.handleClick.bind(this);\r\n  }\r\n\r\n  handleClick() {\r\n    console.log('this is:', this);\r\n    this.setState(state => ({\r\n      isToggleOn: !state.isToggleOn\r\n    }));\r\n  }\r\n\r\n  newQuote(){\r\n    randomQuote();\r\n    this.color();\r\n  }\r\n\r\n  componentDidMount(){\r\n    this.newQuote();\r\n  }\r\n\r\n  color(){\r\n    var colorS = '#'+Math.floor(Math.random()*16777215).toString(16);\r\n    document.body.style.backgroundColor = shadeColor(colorS, -5);\r\n    document.getElementById(\"random_quote\").style.backgroundColor = shadeColor(colorS, -20);\r\n    document.getElementById(\"random_quote\").style.color = shadeColor(colorS, -20);\r\n    document.getElementById(\"btn1\").style.background = shadeColor(colorS, -20);\r\n    //$(\"body\").animate({backgroundColor:shadeColor(colorS,-5)},1000);\r\n    //$(\"#random_quote\").animate({color:shadeColor(colorS,-20)},1000);\r\n    //$(\"#btn0\").animate({backgroundColor:shadeColor(colorS,-20)},1000);\r\n    //$(\"#btn1\").animate({backgroundColor:shadeColor(colorS,-20)},1000);\r\n    //$(\".fa-quote-left\").animate({color:shadeColor(colorS,-20)},1000);\r\n    //$(\".fa-twitter\").animate({backgroudColor:shadeColor(colorS,-20)},1000);\r\n  }\r\n\r\n  render() {\r\n    return( \r\n      <Container>\r\n\r\n        <Pane align=\"center\" marginTop={majorScale(7)}>\r\n\r\n          <Pane align=\"center\" marginBottom={majorScale(7)} background=\"white\">\r\n            <Col>\r\n              <Text color={\"black\"} id=\"random_quote\" />\r\n            </Col>\r\n          </Pane>\r\n\r\n          <Divider />\r\n\r\n          <Button appearance=\"primary\" intent=\"success\" marginTop={majorScale(4)} height={majorScale(7)} onClick={e => this.newQuote(e)} id=\"btn1\">\r\n            Next Quote!\r\n          </Button>\r\n        \r\n        </Pane>\r\n\r\n      </Container>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nexport default RQM;\r\n\r\n/*\r\n\r\n          <Button onClick={this.handleClick}>\r\n            {this.state.isToggleOn ? 'ON' : 'OFF'}\r\n          </Button>\r\n          <Button\r\n            onClick={(e) => this.handleClick(e)}\r\n            id=\"btn0\"\r\n          >Tweet\r\n          </Button>\r\n\r\n */\r\n\r\nfunction randomQuote(){\r\n  $.ajax({   \r\n    url: \"https://api.forismatic.com/api/1.0/?\",\r\n    dataType: \"jsonp\",\r\n    data: \"method=getQuote&format=jsonp&lang=en&jsonp=?\",\r\n    success: function( response ) {\r\n      if(response.quoteText.length > 120){\r\n        randomQuote();\r\n      }\r\n      if(response.quoteAuthor.length > 0){\r\n        $(\"#random_quote\").html(\"<p id='random_quote' class='lead text-center'>\" + response.quoteText + \"<br/>&dash; \" + response.quoteAuthor + \" &dash;</p>\");\r\n        $('#btn0').attr('href', 'https://twitter.com/intent/tweet?text='+response.quoteText+ '- ' + response.quoteAuthor).attr('target', '_blank');\r\n      } else {\r\n        $(\"#random_quote\").html(\"<p id='random_quote' class='lead text-center'>\" + response.quoteText + \"<br/>&dash; Unknown &dash;</p>\");\r\n        $('#btn0').attr('href', 'https://twitter.com/intent/tweet?text='+response.quoteText+ '- Unknown').attr('target', '_blank');\r\n      }      \r\n    }\r\n  });\r\n}\r\n\r\n// credit: https://stackoverflow.com/questions/5560248/programmatically-lighten-or-darken-a-hex-color-or-rgb-and-blend-colors/13532993#13532993\r\nfunction shadeColor(color, percent) {\r\n  var R = parseInt(color.substring(1,3),16);\r\n  var G = parseInt(color.substring(3,5),16);\r\n  var B = parseInt(color.substring(5,7),16);\r\n  R = parseInt(R * (100 + percent) / 100);\r\n  G = parseInt(G * (100 + percent) / 100);\r\n  B = parseInt(B * (100 + percent) / 100);\r\n  R = (R<255)?R:255;  \r\n  G = (G<255)?G:255;  \r\n  B = (B<255)?B:255;  \r\n  var RR = ((R.toString(16).length===1)?\"0\"+R.toString(16):R.toString(16));\r\n  var GG = ((G.toString(16).length===1)?\"0\"+G.toString(16):G.toString(16));\r\n  var BB = ((B.toString(16).length===1)?\"0\"+B.toString(16):B.toString(16));\r\n  return \"#\"+RR+GG+BB;\r\n}\r\n\r\n\r\n\r\n\r\n","\r\n/**\r\n * src/App.js\r\n * App component\r\n */\r\n\r\n// imports\r\nimport React, { Component } from 'react';\r\nimport { Pane, Heading } from 'evergreen-ui'\r\n\r\n// components\r\n\r\nimport Divider from './shared/Divider'\r\n\r\nimport RQM from './view'\r\n\r\n// Title component\r\nconst Title = () => (\r\n  <Pane align=\"center\">\r\n    <Heading\r\n      size={700}\r\n      align=\"center\"\r\n      marginTop={42}\r\n      marginBottom={21}\r\n      color={\"white\"}\r\n    >\r\n      Random Quote Machine\r\n    </Heading>\r\n  </Pane>\r\n);\r\n\r\n/**\r\n * App component class\r\n */\r\nclass App extends Component {\r\n  render(){\r\n    return(\r\n      <Pane>\r\n        <Title />\r\n        <Divider />\r\n        <RQM />\r\n        <Divider />\r\n      </Pane>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}